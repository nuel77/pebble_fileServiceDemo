// source: worker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.workerNode.addressCreation', null, global);
goog.exportSymbol('proto.workerNode.commitment', null, global);
goog.exportSymbol('proto.workerNode.data', null, global);
goog.exportSymbol('proto.workerNode.result', null, global);
goog.exportSymbol('proto.workerNode.smartContract', null, global);
goog.exportSymbol('proto.workerNode.transaction', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.workerNode.transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.workerNode.transaction.repeatedFields_, null);
};
goog.inherits(proto.workerNode.transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.workerNode.transaction.displayName = 'proto.workerNode.transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.workerNode.commitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.workerNode.commitment.repeatedFields_, null);
};
goog.inherits(proto.workerNode.commitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.workerNode.commitment.displayName = 'proto.workerNode.commitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.workerNode.smartContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.workerNode.smartContract.repeatedFields_, null);
};
goog.inherits(proto.workerNode.smartContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.workerNode.smartContract.displayName = 'proto.workerNode.smartContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.workerNode.result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.workerNode.result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.workerNode.result.displayName = 'proto.workerNode.result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.workerNode.data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.workerNode.data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.workerNode.data.displayName = 'proto.workerNode.data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.workerNode.addressCreation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.workerNode.addressCreation.repeatedFields_, null);
};
goog.inherits(proto.workerNode.addressCreation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.workerNode.addressCreation.displayName = 'proto.workerNode.addressCreation';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.workerNode.transaction.repeatedFields_ = [10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.workerNode.transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.workerNode.transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.workerNode.transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: msg.getTxid_asB64(),
    contractid: msg.getContractid_asB64(),
    channelid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currentstate: msg.getCurrentstate_asB64(),
    nextstate: msg.getNextstate_asB64(),
    address: msg.getAddress_asB64(),
    creatorsignature: msg.getCreatorsignature_asB64(),
    elector: msg.getElector_asB64(),
    nodeaggregatedsignature: msg.getNodeaggregatedsignature_asB64(),
    signorderList: (f = jspb.Message.getRepeatedBooleanField(msg, 10)) == null ? undefined : f,
    vectorclocksList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.workerNode.transaction}
 */
proto.workerNode.transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.workerNode.transaction;
  return proto.workerNode.transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.workerNode.transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.workerNode.transaction}
 */
proto.workerNode.transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrentstate(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextstate(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCreatorsignature(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setElector(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodeaggregatedsignature(value);
      break;
    case 10:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setSignorderList(value);
      break;
    case 11:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setVectorclocksList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.workerNode.transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.workerNode.transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContractid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrentstate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getNextstate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getCreatorsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getElector_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getNodeaggregatedsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getSignorderList();
  if (f.length > 0) {
    writer.writePackedBool(
      10,
      f
    );
  }
  f = message.getVectorclocksList();
  if (f.length > 0) {
    writer.writePackedInt64(
      11,
      f
    );
  }
};


/**
 * optional bytes txID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getTxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txID = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes txID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setTxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contractID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getContractid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contractID = 2;
 * This is a type-conversion wrapper around `getContractid()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getContractid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractid()));
};


/**
 * optional bytes contractID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractid()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getContractid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setContractid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string channelID = 3;
 * @return {string}
 */
proto.workerNode.transaction.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes currentState = 4;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getCurrentstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes currentState = 4;
 * This is a type-conversion wrapper around `getCurrentstate()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getCurrentstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrentstate()));
};


/**
 * optional bytes currentState = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrentstate()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getCurrentstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrentstate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setCurrentstate = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes nextState = 5;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getNextstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes nextState = 5;
 * This is a type-conversion wrapper around `getNextstate()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getNextstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextstate()));
};


/**
 * optional bytes nextState = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextstate()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getNextstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextstate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setNextstate = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes address = 6;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes address = 6;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes creatorSignature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getCreatorsignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes creatorSignature = 7;
 * This is a type-conversion wrapper around `getCreatorsignature()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getCreatorsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCreatorsignature()));
};


/**
 * optional bytes creatorSignature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCreatorsignature()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getCreatorsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCreatorsignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setCreatorsignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes elector = 8;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getElector = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes elector = 8;
 * This is a type-conversion wrapper around `getElector()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getElector_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getElector()));
};


/**
 * optional bytes elector = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getElector()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getElector_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getElector()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setElector = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes nodeAggregatedSignature = 9;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.transaction.prototype.getNodeaggregatedsignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes nodeAggregatedSignature = 9;
 * This is a type-conversion wrapper around `getNodeaggregatedsignature()`
 * @return {string}
 */
proto.workerNode.transaction.prototype.getNodeaggregatedsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodeaggregatedsignature()));
};


/**
 * optional bytes nodeAggregatedSignature = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeaggregatedsignature()`
 * @return {!Uint8Array}
 */
proto.workerNode.transaction.prototype.getNodeaggregatedsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodeaggregatedsignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setNodeaggregatedsignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * repeated bool signOrder = 10;
 * @return {!Array<boolean>}
 */
proto.workerNode.transaction.prototype.getSignorderList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 10));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setSignorderList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.addSignorder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.clearSignorderList = function() {
  return this.setSignorderList([]);
};


/**
 * repeated int64 vectorClocks = 11;
 * @return {!Array<number>}
 */
proto.workerNode.transaction.prototype.getVectorclocksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.setVectorclocksList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.addVectorclocks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.transaction} returns this
 */
proto.workerNode.transaction.prototype.clearVectorclocksList = function() {
  return this.setVectorclocksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.workerNode.commitment.repeatedFields_ = [2,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.workerNode.commitment.prototype.toObject = function(opt_includeInstance) {
  return proto.workerNode.commitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.workerNode.commitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.commitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitmentid: msg.getCommitmentid_asB64(),
    last4txidsList: msg.getLast4txidsList_asB64(),
    elector: msg.getElector_asB64(),
    nodeaggregatedsignature: msg.getNodeaggregatedsignature_asB64(),
    signorderList: (f = jspb.Message.getRepeatedBooleanField(msg, 5)) == null ? undefined : f,
    vectorclocksList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.workerNode.commitment}
 */
proto.workerNode.commitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.workerNode.commitment;
  return proto.workerNode.commitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.workerNode.commitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.workerNode.commitment}
 */
proto.workerNode.commitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommitmentid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addLast4txids(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setElector(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodeaggregatedsignature(value);
      break;
    case 5:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setSignorderList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setVectorclocksList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.workerNode.commitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.workerNode.commitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.workerNode.commitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.commitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitmentid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLast4txidsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getElector_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNodeaggregatedsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSignorderList();
  if (f.length > 0) {
    writer.writePackedBool(
      5,
      f
    );
  }
  f = message.getVectorclocksList();
  if (f.length > 0) {
    writer.writePackedInt64(
      6,
      f
    );
  }
};


/**
 * optional bytes commitmentID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.commitment.prototype.getCommitmentid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes commitmentID = 1;
 * This is a type-conversion wrapper around `getCommitmentid()`
 * @return {string}
 */
proto.workerNode.commitment.prototype.getCommitmentid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommitmentid()));
};


/**
 * optional bytes commitmentID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitmentid()`
 * @return {!Uint8Array}
 */
proto.workerNode.commitment.prototype.getCommitmentid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommitmentid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.setCommitmentid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes last4txIDs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.workerNode.commitment.prototype.getLast4txidsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes last4txIDs = 2;
 * This is a type-conversion wrapper around `getLast4txidsList()`
 * @return {!Array<string>}
 */
proto.workerNode.commitment.prototype.getLast4txidsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getLast4txidsList()));
};


/**
 * repeated bytes last4txIDs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLast4txidsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.workerNode.commitment.prototype.getLast4txidsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getLast4txidsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.setLast4txidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.addLast4txids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.clearLast4txidsList = function() {
  return this.setLast4txidsList([]);
};


/**
 * optional bytes elector = 3;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.commitment.prototype.getElector = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes elector = 3;
 * This is a type-conversion wrapper around `getElector()`
 * @return {string}
 */
proto.workerNode.commitment.prototype.getElector_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getElector()));
};


/**
 * optional bytes elector = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getElector()`
 * @return {!Uint8Array}
 */
proto.workerNode.commitment.prototype.getElector_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getElector()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.setElector = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes nodeAggregatedSignature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.commitment.prototype.getNodeaggregatedsignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nodeAggregatedSignature = 4;
 * This is a type-conversion wrapper around `getNodeaggregatedsignature()`
 * @return {string}
 */
proto.workerNode.commitment.prototype.getNodeaggregatedsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodeaggregatedsignature()));
};


/**
 * optional bytes nodeAggregatedSignature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeaggregatedsignature()`
 * @return {!Uint8Array}
 */
proto.workerNode.commitment.prototype.getNodeaggregatedsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodeaggregatedsignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.setNodeaggregatedsignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bool signOrder = 5;
 * @return {!Array<boolean>}
 */
proto.workerNode.commitment.prototype.getSignorderList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 5));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.setSignorderList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.addSignorder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.clearSignorderList = function() {
  return this.setSignorderList([]);
};


/**
 * repeated int64 vectorClocks = 6;
 * @return {!Array<number>}
 */
proto.workerNode.commitment.prototype.getVectorclocksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.setVectorclocksList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.addVectorclocks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.commitment} returns this
 */
proto.workerNode.commitment.prototype.clearVectorclocksList = function() {
  return this.setVectorclocksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.workerNode.smartContract.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.workerNode.smartContract.prototype.toObject = function(opt_includeInstance) {
  return proto.workerNode.smartContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.workerNode.smartContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.smartContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: msg.getTxid_asB64(),
    contractid: msg.getContractid_asB64(),
    payload: msg.getPayload_asB64(),
    creatorsignature: msg.getCreatorsignature_asB64(),
    elector: msg.getElector_asB64(),
    nodeaggregatedsignature: msg.getNodeaggregatedsignature_asB64(),
    signorderList: (f = jspb.Message.getRepeatedBooleanField(msg, 7)) == null ? undefined : f,
    vectorclocksList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.workerNode.smartContract}
 */
proto.workerNode.smartContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.workerNode.smartContract;
  return proto.workerNode.smartContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.workerNode.smartContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.workerNode.smartContract}
 */
proto.workerNode.smartContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCreatorsignature(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setElector(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodeaggregatedsignature(value);
      break;
    case 7:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setSignorderList(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setVectorclocksList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.workerNode.smartContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.workerNode.smartContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.smartContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContractid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCreatorsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getElector_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getNodeaggregatedsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSignorderList();
  if (f.length > 0) {
    writer.writePackedBool(
      7,
      f
    );
  }
  f = message.getVectorclocksList();
  if (f.length > 0) {
    writer.writePackedInt64(
      8,
      f
    );
  }
};


/**
 * optional bytes txID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.smartContract.prototype.getTxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txID = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.workerNode.smartContract.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes txID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setTxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contractID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.smartContract.prototype.getContractid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contractID = 2;
 * This is a type-conversion wrapper around `getContractid()`
 * @return {string}
 */
proto.workerNode.smartContract.prototype.getContractid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractid()));
};


/**
 * optional bytes contractID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractid()`
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.getContractid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setContractid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.smartContract.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.workerNode.smartContract.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes creatorSignature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.smartContract.prototype.getCreatorsignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes creatorSignature = 4;
 * This is a type-conversion wrapper around `getCreatorsignature()`
 * @return {string}
 */
proto.workerNode.smartContract.prototype.getCreatorsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCreatorsignature()));
};


/**
 * optional bytes creatorSignature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCreatorsignature()`
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.getCreatorsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCreatorsignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setCreatorsignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes elector = 5;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.smartContract.prototype.getElector = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes elector = 5;
 * This is a type-conversion wrapper around `getElector()`
 * @return {string}
 */
proto.workerNode.smartContract.prototype.getElector_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getElector()));
};


/**
 * optional bytes elector = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getElector()`
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.getElector_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getElector()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setElector = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes nodeAggregatedSignature = 6;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.smartContract.prototype.getNodeaggregatedsignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes nodeAggregatedSignature = 6;
 * This is a type-conversion wrapper around `getNodeaggregatedsignature()`
 * @return {string}
 */
proto.workerNode.smartContract.prototype.getNodeaggregatedsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodeaggregatedsignature()));
};


/**
 * optional bytes nodeAggregatedSignature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeaggregatedsignature()`
 * @return {!Uint8Array}
 */
proto.workerNode.smartContract.prototype.getNodeaggregatedsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodeaggregatedsignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setNodeaggregatedsignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * repeated bool signOrder = 7;
 * @return {!Array<boolean>}
 */
proto.workerNode.smartContract.prototype.getSignorderList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 7));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setSignorderList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.addSignorder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.clearSignorderList = function() {
  return this.setSignorderList([]);
};


/**
 * repeated int64 vectorClocks = 8;
 * @return {!Array<number>}
 */
proto.workerNode.smartContract.prototype.getVectorclocksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.setVectorclocksList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.addVectorclocks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.smartContract} returns this
 */
proto.workerNode.smartContract.prototype.clearVectorclocksList = function() {
  return this.setVectorclocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.workerNode.result.prototype.toObject = function(opt_includeInstance) {
  return proto.workerNode.result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.workerNode.result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.result.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.workerNode.result}
 */
proto.workerNode.result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.workerNode.result;
  return proto.workerNode.result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.workerNode.result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.workerNode.result}
 */
proto.workerNode.result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.workerNode.result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.workerNode.result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.workerNode.result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string statusCode = 1;
 * @return {string}
 */
proto.workerNode.result.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.result} returns this
 */
proto.workerNode.result.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.workerNode.result.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.result} returns this
 */
proto.workerNode.result.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.workerNode.data.prototype.toObject = function(opt_includeInstance) {
  return proto.workerNode.data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.workerNode.data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.data.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    channelid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.workerNode.data}
 */
proto.workerNode.data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.workerNode.data;
  return proto.workerNode.data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.workerNode.data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.workerNode.data}
 */
proto.workerNode.data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.workerNode.data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.workerNode.data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.workerNode.data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatuscode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.data.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.workerNode.data.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.workerNode.data.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.data} returns this
 */
proto.workerNode.data.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.data.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.workerNode.data.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.workerNode.data.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.data} returns this
 */
proto.workerNode.data.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string channelID = 3;
 * @return {string}
 */
proto.workerNode.data.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.data} returns this
 */
proto.workerNode.data.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string statusCode = 4;
 * @return {string}
 */
proto.workerNode.data.prototype.getStatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.data} returns this
 */
proto.workerNode.data.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.workerNode.addressCreation.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.workerNode.addressCreation.prototype.toObject = function(opt_includeInstance) {
  return proto.workerNode.addressCreation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.workerNode.addressCreation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.addressCreation.toObject = function(includeInstance, msg) {
  var f, obj = {
    authpublickey: msg.getAuthpublickey_asB64(),
    uniqueIdentifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    currentstate: msg.getCurrentstate_asB64(),
    vectorclockList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    aggregatedsignature: msg.getAggregatedsignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.workerNode.addressCreation}
 */
proto.workerNode.addressCreation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.workerNode.addressCreation;
  return proto.workerNode.addressCreation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.workerNode.addressCreation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.workerNode.addressCreation}
 */
proto.workerNode.addressCreation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthpublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrentstate(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setVectorclockList(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggregatedsignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.workerNode.addressCreation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.workerNode.addressCreation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.workerNode.addressCreation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.workerNode.addressCreation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUniqueIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCurrentstate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getVectorclockList();
  if (f.length > 0) {
    writer.writePackedInt64(
      6,
      f
    );
  }
  f = message.getAggregatedsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes authPublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.addressCreation.prototype.getAuthpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes authPublicKey = 1;
 * This is a type-conversion wrapper around `getAuthpublickey()`
 * @return {string}
 */
proto.workerNode.addressCreation.prototype.getAuthpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthpublickey()));
};


/**
 * optional bytes authPublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthpublickey()`
 * @return {!Uint8Array}
 */
proto.workerNode.addressCreation.prototype.getAuthpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthpublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setAuthpublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string UNIQUE_IDENTIFIER = 2;
 * @return {string}
 */
proto.workerNode.addressCreation.prototype.getUniqueIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setUniqueIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channelID = 3;
 * @return {string}
 */
proto.workerNode.addressCreation.prototype.getChannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contractID = 4;
 * @return {string}
 */
proto.workerNode.addressCreation.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setContractid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes currentState = 5;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.addressCreation.prototype.getCurrentstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes currentState = 5;
 * This is a type-conversion wrapper around `getCurrentstate()`
 * @return {string}
 */
proto.workerNode.addressCreation.prototype.getCurrentstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrentstate()));
};


/**
 * optional bytes currentState = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrentstate()`
 * @return {!Uint8Array}
 */
proto.workerNode.addressCreation.prototype.getCurrentstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrentstate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setCurrentstate = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated int64 vectorClock = 6;
 * @return {!Array<number>}
 */
proto.workerNode.addressCreation.prototype.getVectorclockList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setVectorclockList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.addVectorclock = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.clearVectorclockList = function() {
  return this.setVectorclockList([]);
};


/**
 * optional bytes AggregatedSignature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.workerNode.addressCreation.prototype.getAggregatedsignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes AggregatedSignature = 7;
 * This is a type-conversion wrapper around `getAggregatedsignature()`
 * @return {string}
 */
proto.workerNode.addressCreation.prototype.getAggregatedsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggregatedsignature()));
};


/**
 * optional bytes AggregatedSignature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregatedsignature()`
 * @return {!Uint8Array}
 */
proto.workerNode.addressCreation.prototype.getAggregatedsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggregatedsignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.workerNode.addressCreation} returns this
 */
proto.workerNode.addressCreation.prototype.setAggregatedsignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


goog.object.extend(exports, proto.workerNode);
